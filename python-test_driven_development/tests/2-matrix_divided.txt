Test cases for matrix_divided function

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Matrix with integers
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


Matrix with floats
>>> matrix_divided([[1.3, 2.2, 3.1], [4.6, 5.5, 6.4]], 3)
[[0.43, 0.73, 1.03], [1.53, 1.83, 2.13]]


if matrix is not list of lists
>>> matrix_divided([1, 2, 3, 4, 5, 6], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


if elements in lists are not int/float
>>> matrix_divided([['H', 2, 3], ["School", None, 6]], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


if rows ar not the same size
>>> matrix_divided([[1, 2, 3], [4, 5]], 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size


if div is not a int/float
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "School")
Traceback (most recent call last):
    ...
TypeError: div must be a number


if div is 0
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero


if div not passed
>>> matrix_divided([[1, 2, 3], [4, 5, 6]])
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'


if matrix is None
>>> matrix_divided(None, 3)
Traceback (most recent call last):
    ...
TypeError: 'NoneType' object is not iterable
